<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quadro de Tarefas</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background: #f4f7fc;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        /* Estilizando o Header */
        header {
            width: 100%;
            background: linear-gradient(135deg, #d8dbe2, #ac9dbd);
            color: black;
            padding: 20px;
            text-align: center;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        header h1 {
            font-size: 2rem;
            font-weight: 700;
        }

        /* Layout do Quadro Kanban */
        .kanban-board {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
            width: 100%;
            max-width: 1100px;
        }

        .kanban-column {
            background: white;
            border-radius: 12px;
            padding: 15px;
            width: 30%;
            min-width: 280px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease-in-out;
        }

        .kanban-column:hover {
            transform: scale(1.02);
        }

        .kanban-column h2 {
            text-align: center;
            margin-bottom: 15px;
            color: #444;
            font-size: 1.4rem;
            font-weight: 600;
        }

        /* Cores espec√≠ficas para cada coluna */
        #new-column {
            border-top: 4px solid #2575fc;
        }

        #in-progress-column {
            border-top: 4px solid #f4a261;
        }

        #done-column {
            border-top: 4px solid #2a9d8f;
        }

        /* Estilo das tarefas */
        .task-card {
            background: #f9f9f9;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            word-wrap: break-word;
        }

        .task-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        /* Estilizando Notifica√ß√µes */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            font-size: 16px;
            opacity: 0;
            transition: opacity 0.5s ease-in-out, transform 0.3s ease-in-out;
            transform: translateY(-10px);
        }

        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* Link para voltar */
        .back-link {
            display: inline-block;
            margin-top: 25px;
            padding: 10px 18px;
            background: #2575fc;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            font-size: 1rem;
            transition: background 0.3s;
        }

        .back-link:hover {
            background: #1a5bd2;
        }

        /* Responsividade */
        @media (max-width: 768px) {
            .kanban-board {
                flex-direction: column;
                align-items: center;
            }

            .kanban-column {
                width: 90%;
            }
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        
        function requestNotificationPermission() {
            if (Notification.permission !== 'granted') {
                Notification.requestPermission();
            }
        }

        function showNotification(message) {
            const notification = document.createElement('div');
            notification.classList.add('notification');
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 500);
            }, 4000);
        }

        function createTaskCard(taskContent) {
            const card = document.createElement('div');
            card.classList.add('task-card');
            card.textContent = taskContent;
            
            // Efeitos de hover originais
            card.addEventListener('mouseenter', () => {
                card.style.transform = 'translateY(-3px)';
                card.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.15)';
            });
            
            card.addEventListener('mouseleave', () => {
                card.style.transform = 'none';
                card.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.1)';
            });
            
            return card;
        }

        // Carregar tarefas iniciais
        socket.on('initial-tasks', (tasks) => {
            const newColumn = document.getElementById('new-column');
            newColumn.querySelectorAll('.task-card').forEach(card => card.remove());
            
            tasks.forEach(taskContent => {
                const card = createTaskCard(taskContent);
                newColumn.appendChild(card);
            });
        });

        // Nova tarefa em tempo real
        socket.on('new-task', (data) => {
            const newColumn = document.getElementById('new-column');
            const card = createTaskCard(data.task);
            newColumn.appendChild(card);
            showNotification(data.message);
        });

        window.onload = requestNotificationPermission;
    </script>
</head>
<body>
    <header>
        <h1>Quadro de Tarefas</h1>
    </header>

    <div class="kanban-board">
        <div class="kanban-column" id="new-column">
            <h2>üìå Novo</h2>
            <% tasks.forEach(task => { %>
                <div class="task-card"><%= task %></div>
            <% }); %>
        </div>
        <div class="kanban-column" id="in-progress-column">
            <h2>‚è≥ Em Andamento</h2>
        </div>
        <div class="kanban-column" id="done-column">
            <h2>‚úÖ Conclu√≠do</h2>
        </div>
    </div>
</body>
</html>